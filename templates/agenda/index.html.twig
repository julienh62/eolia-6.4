{% extends 'base.html.twig' %}

{% block title %}Hello AgendaController!{% endblock %}

{% block body %}
    <h1>Calendrier de toutes les séances </h1>
    <div id="calendrier"> </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}

    <script>
        document.addEventListener("DOMContentLoaded", function() {
            // Your code that interacts with the DOM goes here
        // For instance, initializing a FullCalendar instance

            let calendarElt = document.getElementById('calendrier');
            let calendar; // Define calendar in the outer scope
            if (calendarElt) {
                let mediaQuery = window.matchMedia("(max-width: 1000px)");

                function updateCalendarDuration() {
                    if (calendar && mediaQuery.matches) {
                        calendar.changeView('timeGridThreeDay');
                    } else if (calendar) {
                        calendar.changeView('timeGridWeek');
                    }
                }

                            window.onload = () => {
                calendar = new FullCalendar.Calendar(calendarElt, {

             eventContent: function (arg) {
                    // Récupération de la valeur de stock depuis arg.event.extendedProps
                     let stockg = arg.event.extendedProps.stock;

                     // Vérification si stockg est null, isnan pour verifier si c'est un chiffre si oui, affecter 0
                     if (stockg === null || stockg === undefined || isNaN(stockg)) {
                       stockg = 0;
                    }
                // console.log('calendar', calendar);

                    // Conversion de stockg en entier en utilisant parseInt avec base 10
                    let stock = parseInt(stockg, 10);

                    // Affichage du résultat de la conversion de stock dans la console
                   console.log('stock', stock);

             
             // Récupération de la valeur de quantityCommanded depuis arg.event.extendedProps
             let quantityCommandedg = arg.event.extendedProps.quantityCommanded;

            // Vérification si quantityCommandedg est null, si oui, affecter 0
                if (quantityCommandedg === null || quantityCommandedg === undefined || isNaN(quantityCommandedg)) {
                 quantityCommandedg = 0;
             }

            // Conversion de quantityCommandedg en entier en utilisant parseInt avec base 10
             let quantityCommanded = parseInt(quantityCommandedg, 10);

            // Affichage du résultat de la conversion de quantityCommanded dans la console
             //console.log('quantityCommanded', quantityCommanded);


              let stockHtml = '<div class="event-stock"> ' + 'Il reste : '  + stock + ' places' + '</div>'; 
             //   let fullNameHtml = '<div class="event-q"> ' + ' staff :'+ fullName + '</div>';
             // let quantitecommandeHtml = '<div class="event-q"> ' + 'place déja prise :'+ quantitecommande + '</div>';
             //  let idHtml = '<div class="event-stock"> ' + arg.event.id + '</div>';

                let titleStyle = 'font-weight: bold; font-size: 20px;';

              return {
                html:  '<div style="' + titleStyle + '">' + arg.event.title + '</div>' + stockHtml 
              //  html:  '<div style="' + titleStyle + '">' + arg.event.title + '</div>' + stockHtml + quantityCommandedHtml
              //html: stockHtml + quantitecommandeHtml + arg.event.title + idHtml 
              };

            },
       /*    eventContent: function (arg) {
                  // Récupération de la valeur de stock depuis arg.event.extendedProps
             let stockg = arg.event.extendedProps.stock;

            // Vérification si stockg est null, si oui, affecter 0
             if (stockg === null) {
                 stockg = 0;
             }
             // Conversion de stockg en entier en utilisant parseInt avec base 10
             let stock = parseInt(stockg, 10);

            // Affichage du résultat de la conversion de stock dans la console
            // console.log('stock', stock);

         

               // Récupération de la valeur de quantityCommanded depuis arg.event.extendedProps
             let quantityCommandedg = arg.event.extendedProps.quantityCommanded;

            // Vérification si quantityCommandedg est null, si oui, affecter 0
             if (quantityCommandedg === null) {
                 quantityCommandedg = 0;
             }

            // Conversion de quantityCommandedg en entier en utilisant parseInt avec base 10
             let quantityCommanded = parseInt(quantityCommandedg, 10);

            // Affichage du résultat de la conversion de quantityCommanded dans la console
            // console.log('quantityCommanded', quantityCommanded);

 // Calcul de totalPlace en ajoutant stock et quantityCommanded
             let totalPlace = stock + quantityCommanded;

            // Affichage du résultat de totalPlace dans la console
             console.log('totalplace', totalPlace);




             let stockHtml = '<div class="event-stock"> '  + stock + '</div>';

    
             let totalPlaceHtml = '<div class="event-q"> ' + totalPlace + '</div>';

             let placeHtml = '<div class="event-q"> ' +  quantityCommanded + ' / ' +  totalPlace + '</div>';
     
            let quantityCommandedHtml = '';
            if (quantityCommanded === 0) {
                quantityCommandedHtml = '<div class="event-quantity"> ' + ' déjà pris: 0 ' + '</div>';
            } else {
                quantityCommandedHtml = '<div class="event-quantity"> ' + ' déjà pris : ' + quantityCommanded + '</div>';
            }
            let titleStyle = 'font-weight: bold; font-size: 20px;';
            return {
               // html:  '<div style="' + titleStyle + '">' + arg.event.title + '</div>' + stockHtml + quantityCommandedHtml
                 html:  '<div style="' + titleStyle + '">' + arg.event.title + '</div>' + placeHtml 

            };
        },  */
                    initialView: 'timeGridWeek',
                    views: {
                        timeGridThreeDay: {
                            type: 'timeGrid',
                            duration: {days: 3}
                        },
                        timeGridWeek: {
                            type: 'timeGrid',
                            duration: {days: 7}
                        }
                    },
                    locale: 'fr',
                    timeZone: 'Europe/Paris',
                    headerToolbar: {
                        start: 'prev,next today',
                        center: 'title',
                        end: 'dayGridMonth,timeGridThreeDay,timeGridWeek'
                    },
                    buttonText: {
                        today: 'Aujourd\'hui',
                        month: 'Mois',
                        timeGridThreeDay: '3 jours',
                        timeGridWeek: '7 jours'
                    },
                    events: {{ data|raw }} ,
                    {#    events: {{ dump(data|raw) }}, #}

                });

                calendar.on('eventClick', (e) => {
                    let donnees = {
                        "id": e.event.id
                    };
                    let id = donnees.id;
                    let url = "https://127.0.0.1:8000/calendar/" + id;
                    window.location.href = url;
                });

                                calendar.render();
                                updateCalendarDuration(); // Initial call to set the calendar duration

                               // console.log('Page loaded');
                            };

                    mediaQuery.addEventListener('change', () => {
                      //  console.log('Media query change event:', mediaQuery.matches);
                        updateCalendarDuration();
                    });
                } else {
                 console.error('Calendar element not found!');
                }
        });
    </script>
{% endblock %}
